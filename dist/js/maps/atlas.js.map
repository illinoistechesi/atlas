{"version":3,"sources":["atlas.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","Atlas","hotKeys","shiftDown","keyChar","addEventListener","String","fromCharCode","which","toLowerCase","altKey","atlas","init","Promise","resolve","reject","google","maps","event","addDomListener","setMap","map","isShiftClick","markers","addMarker","data","options","opt","name","marker","Marker","position","LatLng","lat","lng","title","entry","ref","push","idx","events","addListener","readOnly","saveMarkers","MAP_TAG","removeMarker","updateIcons","callback","forEach","icon","getIcon","newIcon","setIcon","updateName","vex","dialog","prompt","message","value","placeholder","markersToString","output","coord","markersFromString","str","split","pair","filter","coords","parseFloat","tag","list","localStorage","setItem","loadMarkers","getItem","lastInfoWindow","addDefaultMarker","click","m","console","log","_entry","info","InfoWindow","content","open","close","dblclick","then","updated","path","SymbolPath","CIRCLE","scale","fillColor","fillOpacity","strokeWeight","addViewMarker","entryData","locData","time","infected","addCustomMarker","text","size","color","opacity","loadMapFromData","line","first","setCenter","removeThemeLabels","theme","elType","elementType","stylers","visibility","changeMapStyle","styles","styledMapType","StyledMapType","mapTypes","set","setMapTypeId","getMapStyleByURL","url","getPage","page","$","get","res","style","nextPage","pagination","currentPage","totalPages","recRes","catch","error","jqXHR","textStatus","errorThrown","setHotKey","shortcut"],"mappings":"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","file":"../atlas.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nwindow.Atlas = function () {\n\n    var hotKeys = {};\n    var shiftDown = false;\n    var keyChar = false;\n    window.addEventListener('keydown', function (e) {\n        keyChar = String.fromCharCode(e.which).toLowerCase();\n        //if(e.shiftKey){\n        //if(e.ctrlKey){\n        if (e.altKey) {\n            shiftDown = true;\n            if (hotKeys[keyChar]) {\n                hotKeys[keyChar](e);\n            }\n        }\n    });\n    window.addEventListener('keyup', function (e) {\n        shiftDown = false;\n        keyChar = false;\n    });\n\n    var atlas = {\n\n        init: function init() {\n            return new Promise(function (resolve, reject) {\n                google.maps.event.addDomListener(window, 'load', resolve);\n            });\n        },\n\n        setMap: function setMap(map) {\n            atlas.map = map;\n        },\n\n        isShiftClick: function isShiftClick() {\n            return shiftDown;\n        },\n\n        // Map Markers\n\n        map: false,\n        markers: [],\n\n        addMarker: function addMarker(data, options) {\n            var opt = options || {};\n            if (!data.name) {\n                data.name = 'Location ' + atlas.markers.length;\n            }\n            var marker = new google.maps.Marker({\n                position: new google.maps.LatLng(data.lat, data.lng),\n                map: data.map,\n                title: data.name\n            });\n            var entry = {\n                ref: marker,\n                data: data\n            };\n            atlas.markers.push(entry);\n            var idx = atlas.markers.length - 1;\n\n            var _loop = function _loop(event) {\n                google.maps.event.addListener(marker, event, function (e) {\n                    data.events[event](e, marker, idx);\n                });\n            };\n\n            for (var event in data.events) {\n                _loop(event);\n            }\n            if (!opt.readOnly) {\n                atlas.saveMarkers(window.MAP_TAG, atlas.markers);\n            }\n            return entry;\n        },\n\n        removeMarker: function removeMarker(idx, options) {\n            var opt = options || {};\n            var entry = atlas.markers[idx];\n            if (entry) {\n                entry.ref.setMap(null);\n                atlas.markers[idx] = null;\n                //markers.splice(idx, 1);\n            }\n            if (!opt.readOnly) {\n                atlas.saveMarkers(window.MAP_TAG, atlas.markers);\n            }\n        },\n\n        /*clearMap: (makers) => {\n        \tmarkers.forEach(entry => {\n        \t\tentry.ref.setMap(null);\n        \t});\n        },*/\n\n        updateIcons: function updateIcons(markers, callback) {\n            markers.forEach(function (entry, idx) {\n                var icon = entry.ref.getIcon();\n                var newIcon = callback(icon, entry, idx);\n                entry.ref.setIcon(newIcon);\n            });\n        },\n\n        updateName: function updateName(idx) {\n            return new Promise(function (resolve, reject) {\n                var entry = atlas.markers[idx];\n                var vx = vex.dialog.prompt({\n                    message: 'Update Marker Name',\n                    value: entry.data.name,\n                    placeholder: 'Location ' + idx,\n                    callback: function callback(value) {\n                        if (value) {\n                            entry.data.name = value;\n                            atlas.saveMarkers(window.MAP_TAG, atlas.markers);\n                            resolve(true);\n                        } else {\n                            resolve(false);\n                        }\n                    }\n                });\n            });\n        },\n\n        markersToString: function markersToString(markers) {\n            var output = '';\n            markers.forEach(function (entry, idx) {\n                if (entry !== null) {\n                    var coord = entry.ref.position;\n                    var name = entry.data.name || 'Location ' + idx;\n                    output += coord.lat() + ',' + coord.lng() + ',' + name + '$';\n                }\n            });\n            return output;\n        },\n\n        markersFromString: function markersFromString(str) {\n            return str.split('$').map(function (pair) {\n                var coords = pair.split(',');\n                return coords;\n            }).filter(function (coords) {\n                return coords.length !== 1;\n            }).map(function (coords, idx) {\n                return {\n                    lat: parseFloat(coords[0]),\n                    lng: parseFloat(coords[1]),\n                    name: coords[2] || 'Location ' + idx\n                };\n            });\n        },\n\n        saveMarkers: function saveMarkers(tag, list) {\n            if (tag) {\n                localStorage.setItem(tag, atlas.markersToString(list));\n            }\n        },\n\n        loadMarkers: function loadMarkers(tag) {\n            var str = localStorage.getItem(tag);\n            return str ? atlas.markersFromString(str) : false;\n        },\n\n        lastInfoWindow: false,\n\n        addDefaultMarker: function addDefaultMarker(data) {\n            var entry = atlas.addMarker({\n                map: data.map,\n                name: data.name,\n                lat: data.coord.lat,\n                lng: data.coord.lng,\n                events: {\n                    click: function click(e, m, i) {\n                        console.log('click', i);\n                        if (atlas.isShiftClick()) {\n                            atlas.removeMarker(i);\n                        } else {\n                            var _entry = atlas.markers[i];\n                            var info = new google.maps.InfoWindow({\n                                content: _entry.data.name\n                            });\n                            if (atlas.map) {\n                                info.open(atlas.map, _entry.ref);\n                                if (atlas.lastInfoWindow) {\n                                    atlas.lastInfoWindow.close();\n                                    atlas.lastInfoWindow = false;\n                                }\n                                atlas.lastInfoWindow = info;\n                            }\n                        }\n                    },\n                    dblclick: function dblclick(e, m, i) {\n                        console.log('dblclick', i);\n                        atlas.updateName(i).then(function (updated) {\n                            if (updated) {\n                                if (atlas.lastInfoWindow) {\n                                    atlas.lastInfoWindow.close();\n                                    atlas.lastInfoWindow = false;\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n            entry.ref.setIcon({\n                path: google.maps.SymbolPath.CIRCLE,\n                scale: 7.5,\n                fillColor: '#F00',\n                fillOpacity: 0.5,\n                strokeWeight: 0\n            });\n            return entry;\n        },\n\n        addViewMarker: function addViewMarker(data) {\n            var entry = atlas.addMarker({\n                map: data.map,\n                lat: data.coord.lat,\n                lng: data.coord.lng,\n                events: {\n                    click: function click(e, m, i) {\n                        console.log('click', i, data);\n                        var entry = atlas.markers[i];\n                        var entryData = entry.data;\n                        var locName = entryData.name || 'Location ' + i;\n                        var locData = '\\n                            <h3>' + locName + '</h3>\\n                            <ul>\\n                                <li>Time: ' + entryData.time + '</li>\\n                                <li>Infected: ' + entryData.infected + '</li>\\n                            </ul>\\n                        ';\n                        var info = new google.maps.InfoWindow({\n                            content: locData\n                        });\n                        if (atlas.map) {\n                            info.open(atlas.map, entry.ref);\n                            if (atlas.lastInfoWindow) {\n                                atlas.lastInfoWindow.close();\n                                atlas.lastInfoWindow = false;\n                            }\n                            atlas.lastInfoWindow = info;\n                        }\n                    }\n                }\n            }, {\n                readOnly: true\n            });\n            var icon = data.icon || {\n                scale: 0\n            };\n            entry.ref.setIcon({\n                path: google.maps.SymbolPath.CIRCLE,\n                scale: 1.0 + 9.0 * icon.scale,\n                fillColor: '#F00',\n                fillOpacity: 0.5,\n                strokeWeight: 0\n            });\n            return entry;\n        },\n\n        addCustomMarker: function addCustomMarker(data) {\n            var entry = atlas.addMarker({\n                map: data.map,\n                lat: data.coord.lat,\n                lng: data.coord.lng,\n                events: {\n                    click: function click(e, m, i) {\n                        console.log('click', i, data);\n                        var entry = atlas.markers[i];\n                        var info = new google.maps.InfoWindow({\n                            content: data.text\n                        });\n                        if (atlas.map) {\n                            info.open(atlas.map, entry.ref);\n                            if (atlas.lastInfoWindow) {\n                                atlas.lastInfoWindow.close();\n                                atlas.lastInfoWindow = false;\n                            }\n                            atlas.lastInfoWindow = info;\n                        }\n                    }\n                }\n            }, {\n                readOnly: true\n            });\n            var icon = data.icon || {\n                size: 0,\n                color: 'rgb(0,0,0)',\n                opacity: 1.0\n            };\n            entry.ref.setIcon({\n                path: google.maps.SymbolPath.CIRCLE,\n                scale: icon.size,\n                fillColor: icon.color,\n                fillOpacity: icon.opacity,\n                strokeWeight: 0\n            });\n            return entry;\n        },\n\n        loadMapFromData: function loadMapFromData(map, value) {\n            var input = value.split('$@@$').map(function (line) {\n                return line.split('$@$');\n            });\n            input.forEach(function (data) {\n                var lat = parseFloat(data[0]);\n                var lng = parseFloat(data[1]);\n                var color = data[2];\n                var size = parseFloat(data[3]);\n                var opacity = parseFloat(data[4]);\n                var text = data[5];\n                atlas.addCustomMarker({\n                    map: map,\n                    coord: {\n                        lat: lat,\n                        lng: lng\n                    },\n                    icon: {\n                        size: size,\n                        color: color,\n                        opacity: opacity\n                    },\n                    text: text\n                });\n            });\n            var first = atlas.markers[0];\n            if (first) {\n                map.setCenter({\n                    lat: first.data.lat,\n                    lng: first.data.lng\n                });\n            }\n        },\n\n        // Map Themes\n\n        removeThemeLabels: function removeThemeLabels(theme) {\n            var elementTypes = ['labels', 'labels.text.fill', 'labels.text.stroke'];\n            elementTypes.forEach(function (elType) {\n                theme.push({\n                    elementType: 'labels',\n                    stylers: [{\n                        visibility: 'off'\n                    }]\n                });\n            });\n            return theme;\n        },\n\n        changeMapStyle: function changeMapStyle(map, name, styles) {\n            var theme = atlas.removeThemeLabels(styles);\n            var styledMapType = new google.maps.StyledMapType(theme, {\n                map: map,\n                name: name\n            });\n            map.mapTypes.set(name, styledMapType);\n            map.setMapTypeId(name);\n        },\n\n        getMapStyleByURL: function getMapStyleByURL(url) {\n            var SNAZZY_MAPS_URL = 'https://snazzymaps.com/explore.json?key=6fbb0a74-ec67-4329-83ee-15edd4740c4b';\n\n            var getPage = function getPage(page) {\n                return new Promise(function (resolve, reject) {\n                    $.get(SNAZZY_MAPS_URL, {\n                        page: page\n                    }, function (res) {\n                        res.styles.forEach(function (style) {\n                            if (style.url === url) {\n                                resolve(style);\n                            }\n                        });\n                        var nextPage = res.pagination.currentPage + 1;\n                        if (nextPage > res.pagination.totalPages) {\n                            reject('Could not find style.');\n                        } else {\n                            getPage(nextPage).then(function (recRes) {\n                                resolve(recRes);\n                            }).catch(reject);\n                        }\n                    }).error(function (jqXHR, textStatus, errorThrown) {\n                        reject(errorThrown);\n                    });\n                });\n            };\n\n            return getPage(1);\n        },\n\n        setHotKey: function setHotKey(shortcut, callback) {\n            hotKeys[shortcut] = callback;\n        }\n    };\n\n    return atlas;\n};\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}