(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var fillText = function fillText(tag, text) {
	var spans = document.getElementsByClassName(tag);
	for (var s = 0; s < spans.length; s++) {
		var span = spans[s];
		span.innerText = text;
	}
};

var atlas = Atlas();

atlas.init().then(function (done) {

	var mapOptions = {
		zoom: 15,
		center: new google.maps.LatLng(41.259716, -95.960588),
		styles: atlas.removeThemeLabels(MAP_STYLES)
	};

	var mapElement = document.getElementById('map');

	var map = new google.maps.Map(mapElement, mapOptions);
	window.mapRef = map;
	atlas.setMap(map);

	var mapThemeTag = localStorage.getItem('map-theme-tag');
	var mapThemeStyle = localStorage.getItem('map-theme-style');
	if (mapThemeTag && mapThemeStyle) {
		var theme = JSON.parse(mapThemeStyle);
		atlas.changeMapStyle(map, mapThemeTag, theme);
	}

	var renderSimulationFromString = function renderSimulationFromString(value) {
		var simulationData = [];
		var peakInfection = 0;
		value.split('%').forEach(function (inLine) {
			var line = inLine.trim();
			var parts = line.split(':');
			var time = parseInt(parts[0]);
			var locations = [];
			if (parts[1]) {
				parts[1].split('$').forEach(function (val) {
					var data = val.split(',');
					var lidx = parseInt(data[0]);
					var infected = parseInt(data[1]);
					locations[lidx] = {
						id: lidx,
						infected: infected
					};
					if (infected > peakInfection) {
						peakInfection = infected;
					}
				});
			}
			simulationData.push({
				time: time,
				locations: locations
			});
		});

		var renderAtTime = function renderAtTime(val) {
			fillText('fill-sim-time', val);
			var data = simulationData[val];
			if (data) {
				atlas.updateIcons(atlas.markers, function (icon, entry, idx) {
					var location = data.locations[idx] || {};
					var inf = location.infected || 0;
					var ratio = inf / peakInfection;
					icon.scale = 1.0 + 9.0 * ratio;
					entry.data.time = val;
					entry.data.infected = inf;
					return icon;
				});
			}
		};

		var simTime = 0;
		var maxSimTime = simulationData.length - 1;
		document.getElementById('back').addEventListener('click', function (e) {
			simTime--;
			if (simTime < 0) {
				simTime = 0;
			}
			renderAtTime(simTime);
		});
		document.getElementById('forward').addEventListener('click', function (e) {
			simTime++;
			if (simTime > maxSimTime) {
				simTime = maxSimTime;
			}
			renderAtTime(simTime);
		});

		var slider = document.getElementById('time');
		slider.step = 1;
		slider.min = 0;
		slider.max = simulationData.length - 1;
		slider.value = 0;
		renderAtTime(0);
		slider.addEventListener('input', function (e) {
			var val = parseInt(e.target.value);
			renderAtTime(val);
			simTime = val;
		});

		var itv = void 0;
		atlas.setHotKey('p', function (e) {
			if (itv) {
				vex.dialog.confirm({
					message: 'Stop simulation?',
					callback: function callback(yes) {
						if (yes) {
							clearInterval(itv);
							itv = false;
						}
					}
				});
			} else {
				vex.dialog.prompt({
					message: 'Select simulation speed (ms/step):',
					value: 250,
					callback: function callback(step) {
						if (step) {
							var t = 0;
							itv = setInterval(function () {
								renderAtTime(t);
								t++;
								if (t > maxSimTime) {
									clearInterval(itv);
									itv = false;
								}
							}, step);
						}
					}
				});
			}
		});
	};

	var shortcutsList = document.getElementById('shortcuts-list');
	document.getElementById('shortcuts').addEventListener('click', function (e) {
		var displayList = document.createElement('div');
		displayList.innerHTML = shortcutsList.innerHTML;
		vex.dialog.alert({
			unsafeMessage: displayList.outerHTML
		});
	});

	vex.dialog.prompt({
		message: 'Enter a key to load a map:',
		callback: function callback(value) {
			if (value) {
				var loaded = atlas.loadMarkers(value);
				if (loaded) {
					loaded.forEach(function (coord) {
						coord.map = map;
						atlas.addViewMarker({
							map: map,
							coord: coord
						});
						var first = atlas.markers[0];
						if (first) {
							map.setCenter({
								lat: first.data.lat,
								lng: first.data.lng
							});
						}
					});
					var simString = localStorage.getItem('data-' + value);
					if (simString) {
						renderSimulationFromString(simString);
						vex.dialog.alert('Loaded existing simulation on map: ' + value);
					} else {
						vex.dialog.alert('Loaded existing map: ' + value);
					}
				} else {
					vex.dialog.alert('Map not found: ' + value);
				}
				window.MAP_TAG = value;
			}
		}
	});

	atlas.setHotKey('t', function (e) {
		vex.dialog.prompt({
			message: 'Enter map theme URL:',
			callback: function callback(value) {
				atlas.getMapStyleByURL(value).then(function (style) {
					localStorage.setItem('map-theme-tag', style.name);
					localStorage.setItem('map-theme-style', style.json);
					var tag = style.name;
					var theme = JSON.parse(style.json);
					atlas.changeMapStyle(map, tag, theme);

					vex.dialog.alert('Changed map theme to: ' + tag);
				}).catch(function (err) {
					vex.dialog.alert('Error: ' + err);
				});
			}
		});
	});

	atlas.setHotKey('v', function (e) {
		vex.dialog.prompt({
			message: 'Enter simulation data for map: ' + window.MAP_TAG,
			callback: function callback(value) {
				localStorage.setItem('data-' + window.MAP_TAG, value);
				renderSimulationFromString(value);
			}
		});
	});
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
